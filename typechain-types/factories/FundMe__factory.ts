/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FundMe, FundMeInterface } from "../FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "funderAddress",
        type: "address",
      },
    ],
    name: "getAddressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getFunder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620014ba380380620014ba833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611334620001866000396000818161039b015281816106ab015281816106fb01526108f101526113346000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610bea565b61032a565b6040516100d79190610c30565b60405180910390f35b3480156100ec57600080fd5b506100f5610373565b6040516101029190610caa565b60405180910390f35b34801561011757600080fd5b50610120610399565b005b34801561012e57600080fd5b5061013761069a565b6040516101449190610c30565b60405180910390f35b34801561015957600080fd5b506101626106a7565b60405161016f9190610cd4565b60405180910390f35b34801561018457600080fd5b5061018d6106cf565b60405161019a9190610caa565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106f9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610d1b565b6109bd565b6040516101f89190610cd4565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a0490919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610da5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104c957600080828154811061044357610442610dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c190610e23565b915050610421565b50600067ffffffffffffffff8111156104e5576104e4610e6c565b5b6040519080825280602002602001820160405280156105135781602001602082028036833780820191505090505b5060009080519060200190610529929190610ae0565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610570573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190610ee7565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161061090610f38565b60006040518083038185875af1925050503d806000811461064d576040519150601f19603f3d011682016040523d82523d6000602084013e610652565b606091505b5050905080610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d90610f99565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b7575b5050505050905060005b815181101561088c57600082828151811061082957610828610dc5565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088490610e23565b91505061080b565b50600067ffffffffffffffff8111156108a8576108a7610e6c565b5b6040519080825280602002602001820160405280156108d65781602001602082028036833780820191505090505b50600090805190602001906108ec929190610ae0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093390610f38565b60006040518083038185875af1925050503d8060008114610970576040519150601f19603f3d011682016040523d82523d6000602084013e610975565b606091505b50509050806109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090611005565b60405180910390fd5b5050565b60008082815481106109d2576109d1610dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a1083610a40565b90506000670de0b6b3a76400008583610a299190611025565b610a3391906110ae565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac1919061116c565b5050509150506402540be40081610ad891906111e7565b915050919050565b828054828255906000526020600020908101928215610b59579160200282015b82811115610b585782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b00565b5b509050610b669190610b6a565b5090565b5b80821115610b83576000816000905550600101610b6b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb782610b8c565b9050919050565b610bc781610bac565b8114610bd257600080fd5b50565b600081359050610be481610bbe565b92915050565b600060208284031215610c0057610bff610b87565b5b6000610c0e84828501610bd5565b91505092915050565b6000819050919050565b610c2a81610c17565b82525050565b6000602082019050610c456000830184610c21565b92915050565b6000819050919050565b6000610c70610c6b610c6684610b8c565b610c4b565b610b8c565b9050919050565b6000610c8282610c55565b9050919050565b6000610c9482610c77565b9050919050565b610ca481610c89565b82525050565b6000602082019050610cbf6000830184610c9b565b92915050565b610cce81610bac565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b610cf881610c17565b8114610d0357600080fd5b50565b600081359050610d1581610cef565b92915050565b600060208284031215610d3157610d30610b87565b5b6000610d3f84828501610d06565b91505092915050565b600082825260208201905092915050565b7f446964206e6f742073656e6420656e6f75676820657468000000000000000000600082015250565b6000610d8f601783610d48565b9150610d9a82610d59565b602082019050919050565b60006020820190508181036000830152610dbe81610d82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e2e82610c17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e6157610e60610df4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ed1600b83610d48565b9150610edc82610e9b565b602082019050919050565b60006020820190508181036000830152610f0081610ec4565b9050919050565b600081905092915050565b50565b6000610f22600083610f07565b9150610f2d82610f12565b600082019050919050565b6000610f4382610f15565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f83600b83610d48565b9150610f8e82610f4d565b602082019050919050565b60006020820190508181036000830152610fb281610f76565b9050919050565b7f5769746864726177206661696c65640000000000000000000000000000000000600082015250565b6000610fef600f83610d48565b9150610ffa82610fb9565b602082019050919050565b6000602082019050818103600083015261101e81610fe2565b9050919050565b600061103082610c17565b915061103b83610c17565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561107457611073610df4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110b982610c17565b91506110c483610c17565b9250826110d4576110d361107f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110fe816110df565b811461110957600080fd5b50565b60008151905061111b816110f5565b92915050565b6000819050919050565b61113481611121565b811461113f57600080fd5b50565b6000815190506111518161112b565b92915050565b60008151905061116681610cef565b92915050565b600080600080600060a0868803121561118857611187610b87565b5b60006111968882890161110c565b95505060206111a788828901611142565b94505060406111b888828901611157565b93505060606111c988828901611157565b92505060806111da8882890161110c565b9150509295509295909350565b60006111f282611121565b91506111fd83611121565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561123c5761123b610df4565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561127957611278610df4565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112b6576112b5610df4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112f3576112f2610df4565b5b82820290509291505056fea2646970667358221220ce9140ed47d33426ca550402f22437192a161a756b31dc27a59b0a64a43aaa9f64736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FundMe";
  }

  deploy(
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  getDeployTransaction(
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }
  static readonly contractName: "FundMe";
  public readonly contractName: "FundMe";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
